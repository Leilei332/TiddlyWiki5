/*\
title: $:/core/modules/widgets/linkcatcher.js
type: application/javascript
module-type: widget

Linkcatcher widget

\*/

"use strict";

var Widget = require("$:/core/modules/widgets/widget.js").widget;

class LinkCatcherWidget extends Widget {
	constructor(parseTreeNode, options) {
		super();
		this.initialise(parseTreeNode, options);
	}
	/*
	Render this widget into the DOM
	*/
	render(parent, nextSibling) {
		this.addEventListeners([
			{ type: "tm-navigate", handler: "handleNavigateEvent" }
		]);
		this.parentDomNode = parent;
		this.computeAttributes();
		this.execute();
		this.renderChildren(parent, nextSibling);
	}
	/*
	Compute the internal state of the widget
	*/
	execute() {
		// Get our parameters
		this.catchTo = this.getAttribute("to");
		this.catchMessage = this.getAttribute("message");
		this.catchSet = this.getAttribute("set");
		this.catchSetTo = this.getAttribute("setTo");
		this.catchActions = this.getAttribute("actions");
		// Construct the child widgets
		this.makeChildWidgets();
		// When executing actions we avoid trapping navigate events, so that we don't trigger ourselves recursively
		this.executingActions = false;
	}
	/*
	Selectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering
	*/
	refresh(changedTiddlers) {
		var changedAttributes = this.computeAttributes();
		if (changedAttributes.to || changedAttributes.message || changedAttributes.set || changedAttributes.setTo) {
			this.refreshSelf();
			return true;
		} else {
			return this.refreshChildren(changedTiddlers);
		}
	}
	/*
	Handle a tm-navigate event
	*/
	handleNavigateEvent(event) {
		if (!this.executingActions) {
			// Execute the actions
			if (this.catchTo) {
				this.wiki.setTextReference(this.catchTo, event.navigateTo, this.getVariable("currentTiddler"));
			}
			if (this.catchMessage && this.parentWidget) {
				this.parentWidget.dispatchEvent({
					type: this.catchMessage,
					param: event.navigateTo,
					navigateTo: event.navigateTo
				});
			}
			if (this.catchSet) {
				var tiddler = this.wiki.getTiddler(this.catchSet);
				this.wiki.addTiddler(new $tw.Tiddler(tiddler, { title: this.catchSet, text: this.catchSetTo }));
			}
			if (this.catchActions) {
				this.executingActions = true;
				var modifierKey = $tw.keyboardManager.getEventModifierKeyDescriptor(event);
				this.invokeActionString(this.catchActions, this, event, { navigateTo: event.navigateTo, modifier: modifierKey });
				this.executingActions = false;
			}
		} else {
			// This is a navigate event generated by the actions of this linkcatcher,
			// so we don't trap it again, but just pass it to the parent
			this.parentWidget.dispatchEvent(event);
		}
		return false;
	}
}

exports.linkcatcher = LinkCatcherWidget;
